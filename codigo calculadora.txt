<DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Calculadora de Receita</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            text-align: center; /* Centraliza o texto */
            color: black; /* Define o texto como preto */
            background-color: white; /* Define o fundo como branco */
        }
        input {
            padding: 10px;
            margin: 5px 0;
            width: 80%; /* Ajusta a largura dos inputs */
            max-width: 300px; /* Limita a largura máxima */
        }
        button {
            padding: 10px;
            margin: 5px 0; /* Margem em cima e embaixo para cada botão */
            width: 10%; /* Ajusta a largura dos botões */
            background-color: yellow; /* Define a cor dos botões como amarelo */
            border: none; /* Remove bordas dos botões */
            cursor: pointer; /* Muda o cursor para indicar um botão */
        }
        button:hover {
            background-color: #f0c040; /* Efeito hover para os botões */
        }
        h1, h2 {
            color: #0d55f0;
        }
        #relatorio {
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ddd;
            display: none; /* Oculta inicialmente */
        }
        .button-row {
            display: flex;
            flex-direction: column; /* Organiza os botões em coluna (um embaixo do outro) */
            align-items: center; /* Centraliza os botões */
        }
    </style>
</head>
<body>

    <h1>Receita MEI</h1>

    <label for="data">Data (DD/MM/AAAA):</label><br>
    <input type="date" id="data" /><br>

    <label for="receitaDiaria">Digite a Receita Diária (R$):</label><br>
    <input type="number" id="receitaDiaria" placeholder="Ex: 100" /><br>
    <div class="button-row">
        <button onclick="calcularReceita()">Somar Receita Diária</button>
        <button onclick="gerarRelatorio('mensal')">Gerar Relatório Mensal</button>
        <button onclick="gerarRelatorio('anual')">Gerar Relatório Anual</button>
        <button onclick="limparDados()">Limpar Dados</button>
        </div>
    <h2>Resultados do Dia:</h2>
    <p><strong>Receita Diária: R$</strong> <span id="receitaDiariaResultado">0</span></p>

    <h2>Total Acumulado:</h2>
    <p><strong>Total Acumulado Diário: R$</strong> <span id="totalDiarioAcumulado">0</span></p>
    <p><strong>Total Acumulado Mensal: R$</strong> <span id="totalMensalAcumulado">0</span></p>
    <p><strong>Total Acumulado Anual: R$</strong> <span id="totalAnualAcumulado">0</span></p>

    <div id="relatorio">
        <h2>Relatório de Receitas</h2>
        <p id="relatorioConteudo"></p>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script>
        // Função para carregar os dados armazenados no localStorage
        function carregarDados() {
            const receitaData = localStorage.getItem("receitas");
            if (receitaData) {
                const receitas = JSON.parse(receitaData);
                calcularTotais(receitas);
            }
        }

        // Função para calcular os totais a partir dos dados armazenados
        function calcularTotais(receitas) {
            let totalDiario = 0;
            let totalMensal = 0;
            let totalAnual = 0;

            const hoje = new Date();
            const mesAtual = hoje.getMonth() + 1; // Meses começam do zero
            const anoAtual = hoje.getFullYear();

            for (const data in receitas) {
                receitas[data].forEach(receita => {
                    totalDiario += receita.valor;

                    const dataReceita = new Date(data.split("/").reverse().join("-")); // Formato YYYY-MM-DD
                    if (dataReceita.getFullYear() === anoAtual) {
                        totalAnual += receita.valor;
                        if (dataReceita.getMonth() + 1 === mesAtual) {
                            totalMensal += receita.valor;
                        }
                    }
                });
            }

            // Atualiza a interface com os totais calculados
            document.getElementById("totalDiarioAcumulado").innerText = totalDiario.toFixed(2);
            document.getElementById("totalMensalAcumulado").innerText = totalMensal.toFixed(2);
            document.getElementById("totalAnualAcumulado").innerText = totalAnual.toFixed(2);
        }

        // Função para calcular e somar a receita diária
        function calcularReceita() {
            var receitaDiaria = document.getElementById("receitaDiaria").value;
            var data = document.getElementById("data").value;

            if (receitaDiaria === "" || isNaN(receitaDiaria) || data === "") {
                alert("Por favor, insira valores válidos para a receita diária e a data.");
                return;
            }

            receitaDiaria = parseFloat(receitaDiaria);

            // Exibe a receita diária calculada
            document.getElementById("receitaDiariaResultado").innerText = receitaDiaria.toFixed(2);

            // Armazena a receita no localStorage
            const receitas = JSON.parse(localStorage.getItem("receitas")) || {};

            // Se já existe uma receita para a data, adiciona a nova
            if (receitas[data.split("-").reverse().join("/")]) {
                receitas[data.split("-").reverse().join("/")].push({ valor: receitaDiaria });
            } else {
                // Caso contrário, cria um novo array para a data
                receitas[data.split("-").reverse().join("/")] = [{ valor: receitaDiaria }];
            }

            localStorage.setItem("receitas", JSON.stringify(receitas));

            // Atualiza os totais
            calcularTotais(receitas);
        }

        // Função para gerar o relatório
        function gerarRelatorio(tipo) {
            const receitaData = localStorage.getItem("receitas");
            let relatorioConteudo = "<strong>Relatório de Receitas:</strong><br><br>";
            let totalRelatorio = 0;

            if (!receitaData) {
                alert("Nenhuma receita registrada para gerar um relatório.");
                return;
            }

            const receitas = JSON.parse(receitaData);
            const hoje = new Date();
            const mesAtual = hoje.getMonth() + 1; // Meses começam do zero
            const anoAtual = hoje.getFullYear();

            for (const data in receitas) {
                receitas[data].forEach(receita => {
                    const dataReceita = new Date(data.split("/").reverse().join("-")); // Formato YYYY-MM-DD

                    // Filtra as receitas de acordo com o tipo de relatório solicitado
                    if (
                        (tipo === 'diario' && dataReceita.toDateString() === hoje.toDateString()) ||
                        (tipo === 'mensal' && dataReceita.getMonth() + 1 === mesAtual && dataReceita.getFullYear() === anoAtual) ||
                        (tipo === 'anual' && dataReceita.getFullYear() === anoAtual)
                    ) {
                        relatorioConteudo += `Data: ${data} - Receita: R$ ${receita.valor.toFixed(2)}<br>`;
                        totalRelatorio += receita.valor;
                    }
                });
            }

            if (totalRelatorio === 0) {
                relatorioConteudo = "<strong>Nenhuma receita registrada para este período.</strong><br>";
            }

            relatorioConteudo += `<br><strong>Total Geral: R$ ${totalRelatorio.toFixed(2)}</strong>`;
            document.getElementById("relatorioConteudo").innerHTML = relatorioConteudo;
            document.getElementById("relatorio").style.display = "block"; // Exibe o relatório
        }

        // Função para baixar o relatório em PDF
        async function baixarRelatorioPDF(tipo) {
            gerarRelatorio(tipo); // Gera o relatório primeiro
            const relatorioConteudo = document.getElementById("relatorioConteudo").innerHTML;
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();

            // Adiciona o conteúdo HTML ao PDF
            await doc.html(relatorioConteudo, {
                callback: function (doc) {
                    doc.save(`relatorio_${tipo}.pdf`);
                },
                x: 10,
                y: 10,
            });
        }

        // Função para limpar os dados armazenados
        function limparDados() {
            localStorage.removeItem("receitas");
            document.getElementById("receitaDiariaResultado").innerText = "0";
            document.getElementById("totalDiarioAcumulado").innerText = "0";
            document.getElementById("totalMensalAcumulado").innerText = "0";
            document.getElementById("totalAnualAcumulado").innerText = "0";
            document.getElementById("relatorio").style.display = "none"; // Esconde o relatório
        }

        // Carrega os dados ao abrir a página
        window.onload = carregarDados;
    </script>
</body>
</html>